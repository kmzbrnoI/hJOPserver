unit appEv;

interface

uses SysUtils, Classes;

type
  TAppEvents = class
  public
    lastException: Exception;

    constructor Create();
    destructor Destroy(); override;

    procedure OnAppException(Sender: TObject; E: Exception);
    procedure LogException(E: Exception; prefix: string = '');

  end;

var
  AppEvents: TAppEvents;

implementation

uses Logging, fMain, JclDebug;

/// /////////////////////////////////////////////////////////////////////////////

constructor TAppEvents.Create();
begin
  inherited;
  Self.lastException := nil;
end;

destructor TAppEvents.Destroy();
begin
  inherited;
end;

/// /////////////////////////////////////////////////////////////////////////////

procedure TAppEvents.OnAppException(Sender: TObject; E: Exception);
begin
  Self.LogException(E, 'APP MAIN EXCEPTION');
end;

/// /////////////////////////////////////////////////////////////////////////////

procedure TAppEvents.LogException(E: Exception; prefix: string = '');
begin
  var strs := TStringList.Create();
  try
    try
      Self.lastException := E;

      if (prefix <> '') then
        strs.Add(prefix + ' ' + E.Message)
      else
        strs.Add(E.Message);

      for var i := 0 to JclLastExceptStackList.Count - 1 do
        if (GetLocationInfo(JclLastExceptStackList.Items[i].CallerAddr).LineNumber <> 0) then
          strs.Add(GetLocationInfoStr(JclLastExceptStackList.Items[i].CallerAddr));

      Log(strs, llError);

      if (Assigned(F_Main)) then
        F_Main.LogStatus('ERR: výjimka: '+E.Message + ' (' + prefix + ')');
    except

    end;
  finally
    strs.Free();
  end;
end;

/// /////////////////////////////////////////////////////////////////////////////

initialization

AppEvents := TAppEvents.Create();

// Enable raw mode (default mode uses stack frames which aren't always generated by the compiler)
Include(JclStackTrackingOptions, stRawMode);
// Disable stack tracking in dynamically loaded modules (it makes stack tracking code a bit faster)
Include(JclStackTrackingOptions, stStaticModuleList);

// Initialize Exception tracking
JclStartExceptionTracking;

finalization

// Uninitialize Exception tracking
JclStopExceptionTracking;

AppEvents.Free();

end.// unit
